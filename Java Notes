(Burada bulunan açıklamalar C ve Sistem Programcıları Derneği'nin Java Kursu'nun notlarından derlenmiştir.)
(Buradaki yazıları Derneğin Kursuna KATILMADAN okumak sizin açınızdan tavsiye edilmez. Kavramlar daha
kapsamlı bir şekilde kursta işlenir ve notlar hatırlatıcı amaçla verilir.)


                                           !!!Temel Kavramlar!!!

Programlama dilleri 3 biçimde sınıflandırılır:
  1- Seviyelerine göre
  2- Kullanım alanlarına göre
  3- Programlama modeline göre:
        1- Sınıflar kullanılarak yazılan modele nesne yönelimli model (object oriented model) denir.
        2- Matematiksel formül yazar gibi yazılan modele fonksiyonel (functional) proramlama modeli denir.
        3- Bazı diller birden fazla modeli destekler, bunlara çok modelli (multiparadigm) diller denir.
        
Tiobe adlı şirket hangi dilin ne kadar kullanıldığı ile ilgili istatistik tutar.

Çevirici Program (Translater): Bir programlama dilinde yazılmış olan programı edeğer olarak başka bir dile 
  dönüştürür. Çevirici programlarda kaynak dil (source language) ve hedef dil (target language) vardır.
Derleyici (Compiler): Hedef dilin alçak seviyeli dil (saf makine dili, sembolik makine dili ya da
  arakod) olduğundaki bu çevirici progranlara denir.
Yorumlayıcı (Interpreter): Bazı programlar hiç kod üretmeden doğrudan çalırlar ve bunları çalıtıran 
  programlardır.
  
Not: Bazı diller ya derleyici ile ya da yorumlayıcı ile, bazıları da her ikisi ile birlikte çalışırlar.
Java DERLEYİCİ ile çalışır.

İşletim Sistemi: Makine donanımını yöneten, bilgisayar ile kullanıcı arasında bağ kuran bir sistem
  yazılımdır. Işletim sistemleri iki gruba ayrılır: Masaüstü (Desktop) ve Mobil (Mobile).

Her mobil sistemin kendine özgü bir geliştirme dili ve ortamı vardır. Tek bir ortamda gelitirilen ve
  tümünde çalıabilen platformlar üzerine çalılsa da henüz tam başarı sağlanamamıştır. 
Java özellikle Android iletim sistemindeki uygulamaların geliştirilmesinde yaygın olarak kullanılır.

Açık Kaynak Yazılım (Open Source) ve Özgür Yazlım (Free Software) Temel Prensipleri:
  - Bedavadır ve kullanmak için herhangi bir lisans ücreti ödenmesi gerekmez
  - Kaynak kod sahiplenilemez, Kaynak kod üzerine ekleme yapıldığında kodlar kapatılamaz. Onlarında açılması
      gerekir.
  - Çoğaltılabilir, izin almadan kullanılabilir.
Not: Açık Kaynak Yazılım ile Özgür Yazılım arasında bazı faklar vardır.
       (https://opensource.com/article/17/11/open-source-or-free-software)
Mülkiyete Sahip Yazılım (Propriatery Software): Bu yazılımlar para verilerek kullanılır ve çoğaltılamazlar.

IDE (Integrated Development Environment): Derleyiciler komut satırından çalıştırılan basit bir arayüze 
                                            sahip programlardır. Aslında teorik olarak Java ile 
                                            geliştirilecek her uygulama notepad gibi basit bir editörle 
                                            yazılıp, komut satırından derlenebilir. Fakat pratikte bu 
                                            şekilde program yazmak oldukça fazla zaman alır. Yazılım 
                                            geliştirmeyi kolaylaştırmak için ismine IDE denilen özel
                                            yazılımlar bulunmaktadır. IDE lerin içerisinde editörler, 
                                            yardımcı araçlar, test araçları, çeşitli kodları otomatik
                                            olarak yazabilen araçlar vs bulunur. Java ile uygulama 
                                            geliştirilirken kullanılabilecek çeşitli IDE ler bulunmaktadır.
Not: En yaygın kullanlılan IDE'ler Eclipse, IntelliJIdea ve Netbeans'dir.

Dil Kavramı: Dil iletişimde kullanılan semboller topluluğudur ve kurallarına gramer denir. Gramerin çeşitli
               alt dalları vardır, ancak en önemlileri sentaks (syntax) ve semantik (semantic) alanlarıdır.
               Bir olgunun dil olabilmesi için en azından sentaks ve semantiğe sahip olması gerekir.
Sentaks: Doğru yazıma ve doğru dizilime ilikin kurallardır.
           Örnek: "I a student am"
                  Bu cümlede dizilim yanlış olduğundan sentaks hatası vardır.
           Örnek: "System.out.println("Merhaba Java"
                  Bu cümlede yazım yanlış olduğundan sentaks hatası vardır.
Semantik: Dildeki doğru yazılmış ve dizilmiş öğelerin ne anlam ifae ettiklerine ilişkin kurallardır.
            Örnek: "My name was Ali"
                   Bu cümlede söylenmek istenen "My name is Ali" olduğundan mantıksal bir yanlış vardır,
                   yani semantik hata vardır. (Semantik hata çalıştırıldığında yazılmış geçersiz bir 
                   programlama matığının yanlış sonuçlar üretmesi sonucu oluşur.)

Bilgisayar Dilleri (Computer Languages): Bilgisayar bilimlerinde kullanılmak üzere tasarlanmış dillerdir.
Programlama Dilleri (Programming Languages): Bir bilgisayar dilinde akışın varolduğu dillerdir.
Not: Her programlama dili bir bilgisayar dilidir, ancak her bilgisayar dili bir programlama dili
       olmayabilir.

Atom (Token): Bir programlama dilindeki kendi başına anlamlı olan en küçük yapı birimidir.
                Atomlar 6 gruba ayrılır:
                  1-Anahtar Sözcükler (Keywords / Reserved Words): Dil için anlamı olan ve değişken ismi
                                                                     olarak kullanılması yasak olan 
                                                                     atomlardır.
                  2- Değişkenler (Identifiers / Variables): İsmini programcının belli bir kuralla
                                                              belirlediği atomlardır.
                  3- Operatörler (Operators): Bir işleme yol açan ve işlem sonucunda bir değer 
                                                üretilmesini sağlayan atomlardır.
                  4- Sabitler (Literals / Constants): Program kodu doğrudan yazılmış sayılara denir.
                  5- Stringler (String Literals): İki tırnak içerisindeki yazılara tırnaklarıyla 
                                                    birlikte string atomu denir.
                  6- Ayraçlar (Delimiters / Punctuators): Yukarıdaki gruplar dışında kalan tüm atomlara
                                                            ayıraç atomlar denilmektedir.
Boşluk Karakterleri (White Space): Klavyeden boşluk duygusu yaratmak için basılan karakterlerdir. Boşluk
                                     karakterleri tipik olarak SPACE, TAB, ENTER karakterleridir.

Java programlama dilinin yazım kuralı iki madde ile özetlenebilir:
  1- Atomlar arasında istenildiği kadar boşluk bırakılabilir.
  2- Anahtar sözcükler ve değişkenler dışında kalan atomlar istenildiği kadar bitişik yazılabilir.
       (Anahtar sözcüklerle değişken arasında en az bir boşluk karakteri olması gerekir.)

Derleyicilerin hata mesajları 3 gruba ayrılmaktadır:
  1- Uyarılar (Warnings): Byte kodun (.class uzantılı dosya) oluşmasına engel olmayan, olası mantık
                            hatalarının programcıya bildirilmesi amacıyla kullanılan mesajlardır.
                            Programcı uyarıları dikkate almalıdır. Bir programın özel bir durumu yoksa
                            hiç uyarı mesajı alınmadan derlenmesi hedeflenmelidir.
  2- Gerçek Hatalar (Errors): Dilin sentaks ve semantik kurallarına uyulmamasından kaynaklanan hatalardır.
                                Bir programda tek bir gerçek hata olsa bile byte kod üretilmez. Şüphesiz
                                programcı tüm gerçek hataları düzelttiğinde programı derleyebilirve ara
                                kod üretilebilir.
  3- Ölümcül Hatalar (Fatal Errors): Derleme işleminin bitirilmesini dahi engelleyecek ciddi hatalardır.
                                       Programcının kod olarak yapabileceği bir şey yoktur. Genellikle
                                       sistemdeki problemler yüzünden ortaya çıkmaktadır.

Sentaks İçin Genel Biçimler: Programlama dillerinin standartlarında ya da spesifikasyonlarında iki 
                               anlamlılığa (ambiguity) izin vermeyen BNF (Backus-Naur Form) notasyonu ya
                               da türevleri kullanılmaktadır.
Not: Bu dosyada kurstaki gibi notasyonlar kullanılacaktır. Açısal parantez ( <> ) mutlaka olması gereken
       öğeler için ve köşeli parantez ( [] ) isteğe bağlı olan öğeler için.

Genel olarak söylemek gerekirse bir Java programı paketlerden (package), paketler sınıflardan (class),
  sınıflar da metotlardan oluşur. Bir sınıfı bir paket içerisinde bildirmek için o sınıfın .java
  dosyasının en tepesinde aşağıdaki gibi bildirim yapmak gerekir:
    package <paket ismi>;

Bununla birlikte bir sınıf bir paket içerisinde ise diskte o paket isminde bir dizinin (folder)
  içerisinde bulunması gerekmektedir. Derleme sonucunda üretilen arakodun da paket isminde bir dizin
  içerisinde olması zorunluluktur. Paket kavramı daha sonra detaylı olarak ele alınacaktır.
  
  Sınıf bildiriminin genel biçimi şöyledir:
    [erişim belirleyici] class <sınıf ismi> {
      //...
    }
Burada görüldüğü gibi sınıf bildiriminin başındaki erişim belirleyici olmayabilir. Sınıf kavramı daha sonra
  detaylı olarak ele alınacaktır.

Metot bildiriminin genel biçimi şöyledir:
  [erişim belirleyici] [static] <geri dönüş değerinin türü><metot ismi>([parametre bildirimi])
    {
      //...
    }

Java programlama dilinde alt programlara metot denir. Erişim belirleyici şunlardan biri olabilir:
  public
  protected
  private
Hiçbir belirleyici de yazılmayabilir (no modifier).

Bir metot ayrıca static anahta sözcüğü ile bildirilirse static olur.

Java programları main isimli bir metottan çalışmaya başlar.

Bir metodun bildirilmesi (declaration) demek onun programcı tarafından yazılması demektir. Çağrılması
  (call) ise çalıştırılması demektir. Static bir metodu çağırmanın genel biçimi şöyledir:
    [paket ismi][.][sınıf ismi][.]<metot ismi>([argüman listesi]);
Eğer çağrılan metodun (callee) bildirimi çağıran metodun (caller) bildirimi ile aynı paket içerisindeyse
  (farklı sınıflarda olabilirler) paket ismi hiç yazılmayabilir (istenirse yazılabilir).

Yorum Satırları (Comment Lines): Bir programın kaynak kodunda derleyici tarafından dikkate alınmayan kod
                                   bölümleridir. Yorum satırları program içerisinde çeşitli açıklamalar
                                   yapmak amacıyla kullanılabilir. Program kodu içerisinde gerektiğinden
                                   fazla yorum satırı kullanmak kodun okunabilirliğini bozabilmektedir.
                                   Buna dikkat edilmesi gerekir.
                                   Java programlama dilinde yorum satırları iki biçimde oluşturulabilir:
                                     1- //bu atom ile oluturulan satır kullanıldığı yerden itibaren yok
                                          sayılır.
                                     2- /*bu atomlar arasında kalan kod bölümleri yok sayılır birden fazla
                                          satır için kullanılabilir.*/


                                      !!!Türler & Bildirim!!!

Tür Belirten Anahtar Sözcük  |  Uzunluk (Byte)  |  Sınır Değerler
short                        |  2               |  [-32 768, +32 767]
int                          |  4               |  [-2 147 483 648, +2 147 483 647]
long                         |  8               |  [-9 223 372 036 854 775 808, +9 223 372 036 854 775 808]
byte                         |  1               |  [-128, +127]
float                        |  4               |  [+-3.6*10^-38, +-3.6*10^+38]
double                       |  8               |  [+-1.8*10^-308, +-1.8*10^+308]
boolean                      |  -               |  true, false
char                         |  2               |  [0, +65 635]

- Java da işaretsiz tamsayı türleri yoktur. Ancak Java 8 den itibaren 4 byte'lık işaretsiz tamsayı
    işlemleri yapılabilmektedir. Bu konu ileride ele alınacaktır.
- byte, short, int, long türlerinin içindeki değerler tamsayı değerleridir.
- float ve double türlerinin değerleri kayan noktalı (floating point) formatta tutan türlerdir. float ve
    double türleri sayıları sırasıyla tek hassasiyetli (single-precision) ve çift hassasiyetli
    (double-percision) olarak IEEE 754 standardına göre tutulmaktadır. Bu türlerde bazı sayılar tam olarak
    ifade edilemezler. O sayıya yakın bir sayı ile ifadde edilebilirler. Bir noktalı sayının ifade
    edilemeyip ona yakın olan bir sayının ifade edilmesiyle oluşan hataya yuvarlama hatası (rounding
    error) denilmektedir. Yuvarlama hataları değer ilk kez yerleştirilirken oluşabileceği gibi, bir
    işlemin sonucunda da oluşabilmektedir.
- float türünün yuvarlama hatalarına karşı direnci zayıftır. bu nedenle double türü daha fazla tercih
    edilmektedir.
- Yuvarlama hataları sebebiyle özellikle finansal uygulamalarda hatalı değerler oluşşabilmektedir. Bunun
    için Java'da java.math paketi içerisinde BigDecimal isimli bir sınıf bulunmaktadır. Bu tarz
    uygulamalarda BigDecimal sınıfı kullanılmak durumundadır. Bu konu uygulama kursunda ele alınacaktır.
- char türü Java'da UNICODE tablo dikkate alınarak belirlenmiştir. Bu nedenle char türü 2 byte'dır. Yani
    char türden bir değişkenin içerisine herhangi bir karakterin UNICODE tablosundaki sıra numarası
    yerleştirilebilir. UNICODE tablo dünyadaki neredeyse bütün dillerin karakterlerini ve pek çok özel
    karakteri ifade edebilme yeteneğine sahiptir. (www.unicode.org)
- Yazılar aslında her bir karakteri bir sayı olacak biçimde bellekte kodlanmaktadır. Hangi sayının hangi
    karakteri temsil ettiği bir tabloyla belirlenmektedir. ASCII tablosu 1 byte'lık yani 256 satırdan
    oluşan bir tabloyken UNICODE 2 byte'lık yani 65 536 satırdan oluşan bir tablodur.
Not: ASCII tablosunun ilk hali 7 bittir. Daha sonra 8 bitlik ASCII tablosu oluşturulmuştur.
- Yalnızca ASCII ve UNICODE değil pek çok karakter tabloları ve kodlamaları vardır. Buna "character
    encoding" denilmektedir. Bir yazı hangi tabloyla kodlanmışsa o tabloyla yorumlamak gerekir. Aksi halde
    asıl yazıyla alakası olmayan bir yazı görüntülenebilir. Karakter kodlama (character encoding) konusu
    ileride ele alınacaktır.
- Java standarlarında boolean türünün uzunluğu belirtilmemiştir.
- Java'da en çok kullanılan tamsayı türü int, en çok kullanılan gerçek sayı türü de double'dır.
Not: Büyük ölçüde Java programlama dilinin özellikleri alınarak geliştirilmiş C# programlama dilinde
       tamsayı türlerinin ayrıca işaretsiz versiyonları da bulunmaktadır.
Not: C# programlama dilinde decimal isimli bir tür bulunmaktadır Bu tür doğal bir tür değildir.
       Microişlemcilerin decimal türü ile işlemler yapabilecek komutları yoktur. Bu işlemler dolaylı
       olarak yüzlerce komut ile yapılabilmektedir. Java'daki BigDecimal sınıfının karşılığı olarak C#'da
       decimal türü kullanılmaktadır.

Bildirim İşlemi
  Kullanılmadan önce bir değişkenin derleyiciye tanıtılması işlemine bildirim (declaration) denir.
    Değişkenler bildirilmeden kullanılamazlar.
    
  Bildirim işlminin genel biçimi şöyledir:
    <tür> <değişken listesi>;
  Aynı türden değişkenler aralarına "," (virgül) konularak bildirilebilirler.
  
  Java programlama dilinde değişken bildirimleri 3 yerde yapılabilir:
    1- Metotların içerisinde: Metotların içerisinde bildirilen değişkenlere yerel değişkenler (local
         variables) denilmektedir.
    2- Metotların parametre parantezleri içerisinde: Bu tür değişkenlere parametre değişkenleri
         denilmektedir.
    3- Metotların dışında fakat sınıfların içerisinde: Bu tür değişkenlere "sınıfların veri elemanları"
         denilmektedir.
         
Yerel bildirimler
  Yerel değişkenler metodun içerisinde herhangi bir yerde bildirilebilirler.
  Not: Bir değişkenin içerisindeki değerler print ve ğrintln metotlarıyla yazdırılabilirler.
  
Değişkenlere İlkdeğer Verilmesi
  Bildirim işleminin bir parçası olarak değişkenlere değer atanmasına ilk değer verme (initialization)
    denilmektedir.
  İlk değer verme ve ilk kez değer verme işlemleri çoğu zaman işlevleri aynı olsa da teknik olarak aynı
    değildir.
  Örnek:
    int a = 8; //İlkdeğer verme işlemi
    int b;
    b = 11; //İlk kez değer verme işlemi

Değişkenlerin Faaliyet Alanları



