(Burada bulunan açıklamalar C ve Sistem Programcıları Derneği'nin Java Kursu'nun notlarından derlenmiştir.)
(Buradaki yazıları Derneğin Kursuna KATILMADAN okumak sizin açınızdan tavsiye edilmez. Kavramlar daha
kapsamlı bir şekilde kursta işlenir ve notlar hatırlatıcı amaçla verilir.)


                                           !!!Temel Kavramlar!!!

Programlama dilleri 3 biçimde sınıflandırılır:
  1- Seviyelerine göre
  2- Kullanım alanlarına göre
  3- Programlama modeline göre:
        1- Sınıflar kullanılarak yazılan modele nesne yönelimli model (object oriented model) denir.
        2- Matematiksel formül yazar gibi yazılan modele fonksiyonel (functional) proramlama modeli denir.
        3- Bazı diller birden fazla modeli destekler, bunlara çok modelli (multiparadigm) diller denir.
        
Tiobe adlı şirket hangi dilin ne kadar kullanıldığı ile ilgili istatistik tutar.

Çevirici Program (Translater): Bir programlama dilinde yazılmış olan programı edeğer olarak başka bir dile 
  dönüştürür. Çevirici programlarda kaynak dil (source language) ve hedef dil (target language) vardır.
Derleyici (Compiler): Hedef dilin alçak seviyeli dil (saf makine dili, sembolik makine dili ya da
  arakod) olduğundaki bu çevirici progranlara denir.
Yorumlayıcı (Interpreter): Bazı programlar hiç kod üretmeden doğrudan çalırlar ve bunları çalıtıran 
  programlardır.
  
Not: Bazı diller ya derleyici ile ya da yorumlayıcı ile, bazıları da her ikisi ile birlikte çalışırlar.
Java DERLEYİCİ ile çalışır.

İşletim Sistemi: Makine donanımını yöneten, bilgisayar ile kullanıcı arasında bağ kuran bir sistem
  yazılımdır. Işletim sistemleri iki gruba ayrılır: Masaüstü (Desktop) ve Mobil (Mobile).

Her mobil sistemin kendine özgü bir geliştirme dili ve ortamı vardır. Tek bir ortamda gelitirilen ve
  tümünde çalıabilen platformlar üzerine çalılsa da henüz tam başarı sağlanamamıştır. 
Java özellikle Android iletim sistemindeki uygulamaların geliştirilmesinde yaygın olarak kullanılır.

Açık Kaynak Yazılım (Open Source) ve Özgür Yazlım (Free Software) Temel Prensipleri:
  - Bedavadır ve kullanmak için herhangi bir lisans ücreti ödenmesi gerekmez
  - Kaynak kod sahiplenilemez, Kaynak kod üzerine ekleme yapıldığında kodlar kapatılamaz. Onlarında açılması
      gerekir.
  - Çoğaltılabilir, izin almadan kullanılabilir.
Not: Açık Kaynak Yazılım ile Özgür Yazılım arasında bazı faklar vardır.
       (https://opensource.com/article/17/11/open-source-or-free-software)
Mülkiyete Sahip Yazılım (Propriatery Software): Bu yazılımlar para verilerek kullanılır ve çoğaltılamazlar.

IDE (Integrated Development Environment): Derleyiciler komut satırından çalıştırılan basit bir arayüze 
                                            sahip programlardır. Aslında teorik olarak Java ile 
                                            geliştirilecek her uygulama notepad gibi basit bir editörle 
                                            yazılıp, komut satırından derlenebilir. Fakat pratikte bu 
                                            şekilde program yazmak oldukça fazla zaman alır. Yazılım 
                                            geliştirmeyi kolaylaştırmak için ismine IDE denilen özel
                                            yazılımlar bulunmaktadır. IDE lerin içerisinde editörler, 
                                            yardımcı araçlar, test araçları, çeşitli kodları otomatik
                                            olarak yazabilen araçlar vs bulunur. Java ile uygulama 
                                            geliştirilirken kullanılabilecek çeşitli IDE ler bulunmaktadır.
Not: En yaygın kullanlılan IDE'ler Eclipse, IntelliJIdea ve Netbeans'dir.

Dil Kavramı: Dil iletişimde kullanılan semboller topluluğudur ve kurallarına gramer denir. Gramerin çeşitli
               alt dalları vardır, ancak en önemlileri sentaks (syntax) ve semantik (semantic) alanlarıdır.
               Bir olgunun dil olabilmesi için en azından sentaks ve semantiğe sahip olması gerekir.
Sentaks: Doğru yazıma ve doğru dizilime ilikin kurallardır.
           Örnek: "I a student am"
                  Bu cümlede dizilim yanlış olduğundan sentaks hatası vardır.
           Örnek: "System.out.println("Merhaba Java"
                  Bu cümlede yazım yanlış olduğundan sentaks hatası vardır.
Semantik: Dildeki doğru yazılmış ve dizilmiş öğelerin ne anlam ifae ettiklerine ilişkin kurallardır.
            Örnek: "My name was Ali"
                   Bu cümlede söylenmek istenen "My name is Ali" olduğundan mantıksal bir yanlış vardır,
                   yani semantik hata vardır. (Semantik hata çalıştırıldığında yazılmış geçersiz bir 
                   programlama matığının yanlış sonuçlar üretmesi sonucu oluşur.)

Bilgisayar Dilleri (Computer Languages): Bilgisayar bilimlerinde kullanılmak üzere tasarlanmış dillerdir.
Programlama Dilleri (Programming Languages): Bir bilgisayar dilinde akışın varolduğu dillerdir.
Not: Her programlama dili bir bilgisayar dilidir, ancak her bilgisayar dili bir programlama dili
       olmayabilir.

Atom (Token): Bir programlama dilindeki kendi başına anlamlı olan en küçük yapı birimidir.
                Atomlar 6 gruba ayrılır:
                  1-Anahtar Sözcükler (Keywords / Reserved Words): Dil için anlamı olan ve değişken ismi
                                                                     olarak kullanılması yasak olan 
                                                                     atomlardır.
                  2- Değişkenler (Identifiers / Variables): İsmini programcının belli bir kuralla
                                                              belirlediği atomlardır.
                  3- Operatörler (Operators): Bir işleme yol açan ve işlem sonucunda bir değer 
                                                üretilmesini sağlayan atomlardır.
                  4- Sabitler (Literals / Constants): Program kodu doğrudan yazılmış sayılara denir.
                  5- Stringler (String Literals): İki tırnak içerisindeki yazılara tırnaklarıyla 
                                                    birlikte string atomu denir.
                  6- Ayraçlar (Delimiters / Punctuators): Yukarıdaki gruplar dışında kalan tüm atomlara
                                                            ayıraç atomlar denilmektedir.
Boşluk Karakterleri (White Space): Klavyeden boşluk duygusu yaratmak için basılan karakterlerdir. Boşluk
                                     karakterleri tipik olarak SPACE, TAB, ENTER karakterleridir.

Java programlama dilinin yazım kuralı iki madde ile özetlenebilir:
  1- Atomlar arasında istenildiği kadar boşluk bırakılabilir.
  2- Anahtar sözcükler ve değişkenler dışında kalan atomlar istenildiği kadar bitişik yazılabilir.
       (Anahtar sözcüklerle değişken arasında en az bir boşluk karakteri olması gerekir.)

Derleyicilerin hata mesajları 3 gruba ayrılmaktadır:
  1- Uyarılar (Warnings): Byte kodun (.class uzantılı dosya) oluşmasına engel olmayan, olası mantık
                            hatalarının programcıya bildirilmesi amacıyla kullanılan mesajlardır.
                            Programcı uyarıları dikkate almalıdır. Bir programın özel bir durumu yoksa
                            hiç uyarı mesajı alınmadan derlenmesi hedeflenmelidir.
  2- Gerçek Hatalar (Errors): Dilin sentaks ve semantik kurallarına uyulmamasından kaynaklanan hatalardır.
                                Bir programda tek bir gerçek hata olsa bile byte kod üretilmez. Şüphesiz
                                programcı tüm gerçek hataları düzelttiğinde programı derleyebilirve ara
                                kod üretilebilir.
  3- Ölümcül Hatalar (Fatal Errors): Derleme işleminin bitirilmesini dahi engelleyecek ciddi hatalardır.
                                       Programcının kod olarak yapabileceği bir şey yoktur. Genellikle
                                       sistemdeki problemler yüzünden ortaya çıkmaktadır.

Sentaks İçin Genel Biçimler: Programlama dillerinin standartlarında ya da spesifikasyonlarında iki 
                               anlamlılığa (ambiguity) izin vermeyen BNF (Backus-Naur Form) notasyonu ya
                               da türevleri kullanılmaktadır.
Not: Bu dosyada kurstaki gibi notasyonlar kullanılacaktır. Açısal parantez ( <> ) mutlaka olması gereken
       öğeler için ve köşeli parantez ( [] ) isteğe bağlı olan öğeler için.

Genel olarak söylemek gerekirse bir Java programı paketlerden (package), paketler sınıflardan (class),
  sınıflar da metotlardan oluşur. Bir sınıfı bir paket içerisinde bildirmek için o sınıfın .java
  dosyasının en tepesinde aşağıdaki gibi bildirim yapmak gerekir:
    package <paket ismi>;

Bununla birlikte bir sınıf bir paket içerisinde ise diskte o paket isminde bir dizinin (folder)
  içerisinde bulunması gerekmektedir. Derleme sonucunda üretilen arakodun da paket isminde bir dizin
  içerisinde olması zorunluluktur. Paket kavramı daha sonra detaylı olarak ele alınacaktır.
  
  Sınıf bildiriminin genel biçimi şöyledir:
    [erişim belirleyici] class <sınıf ismi> {
      //...
    }
Burada görüldüğü gibi sınıf bildiriminin başındaki erişim belirleyici olmayabilir. Sınıf kavramı daha sonra
  detaylı olarak ele alınacaktır.

Metot bildiriminin genel biçimi şöyledir:
  [erişim belirleyici] [static] <geri dönüş değerinin türü><metot ismi>([parametre bildirimi])
    {
      //...
    }

Java programlama dilinde alt programlara metot denir. Erişim belirleyici şunlardan biri olabilir:
  public
  protected
  private
Hiçbir belirleyici de yazılmayabilir (no modifier).

Bir metot ayrıca static anahta sözcüğü ile bildirilirse static olur.

Java programları main isimli bir metottan çalışmaya başlar.

Bir metodun bildirilmesi (declaration) demek onun programcı tarafından yazılması demektir. Çağrılması
  (call) ise çalıştırılması demektir. Static bir metodu çağırmanın genel biçimi şöyledir:
    [paket ismi][.][sınıf ismi][.]<metot ismi>([argüman listesi]);
Eğer çağrılan metodun (callee) bildirimi çağıran metodun (caller) bildirimi ile aynı paket içerisindeyse
  (farklı sınıflarda olabilirler) paket ismi hiç yazılmayabilir (istenirse yazılabilir).

Yorum Satırları (Comment Lines): Bir programın kaynak kodunda derleyici tarafından dikkate alınmayan kod
                                   bölümleridir. Yorum satırları program içerisinde çeşitli açıklamalar
                                   yapmak amacıyla kullanılabilir. Program kodu içerisinde gerektiğinden
                                   fazla yorum satırı kullanmak kodun okunabilirliğini bozabilmektedir.
                                   Buna dikkat edilmesi gerekir.
                                   Java programlama dilinde yorum satırları iki biçimde oluşturulabilir:
                                     1- //bu atom ile oluturulan satır kullanıldığı yerden itibaren yok
                                          sayılır.
                                     2- /*bu atomlar arasında kalan kod bölümleri yok sayılır birden fazla
                                          satır için kullanılabilir.*/


                                      !!!Türler & Bildirim!!!

Tür Belirten Anahtar Sözcük  |  Uzunluk (Byte)  |  Sınır Değerler
short                        |  2               |  [-32 768, +32 767]
int                          |  4               |  [-2 147 483 648, +2 147 483 647]
long                         |  8               |  [-9 223 372 036 854 775 808, +9 223 372 036 854 775 808]
byte                         |  1               |  [-128, +127]
float                        |  4               |  [+-3.6*10^-38, +-3.6*10^+38]
double                       |  8               |  [+-1.8*10^-308, +-1.8*10^+308]
boolean                      |  -               |  true, false
char                         |  2               |  [0, +65 635]

- Java da işaretsiz tamsayı türleri yoktur. Ancak Java 8 den itibaren 4 byte'lık işaretsiz tamsayı
    işlemleri yapılabilmektedir. Bu konu ileride ele alınacaktır.
- byte, short, int, long türlerinin içindeki değerler tamsayı değerleridir.
- float ve double türlerinin değerleri kayan noktalı (floating point) formatta tutan türlerdir. float ve
    double türleri sayıları sırasıyla tek hassasiyetli (single-precision) ve çift hassasiyetli
    (double-percision) olarak IEEE 754 standardına göre tutulmaktadır. Bu türlerde bazı sayılar tam olarak
    ifade edilemezler. O sayıya yakın bir sayı ile ifadde edilebilirler. Bir noktalı sayının ifade
    edilemeyip ona yakın olan bir sayının ifade edilmesiyle oluşan hataya yuvarlama hatası (rounding
    error) denilmektedir. Yuvarlama hataları değer ilk kez yerleştirilirken oluşabileceği gibi, bir
    işlemin sonucunda da oluşabilmektedir.
- float türünün yuvarlama hatalarına karşı direnci zayıftır. bu nedenle double türü daha fazla tercih
    edilmektedir.
- Yuvarlama hataları sebebiyle özellikle finansal uygulamalarda hatalı değerler oluşşabilmektedir. Bunun
    için Java'da java.math paketi içerisinde BigDecimal isimli bir sınıf bulunmaktadır. Bu tarz
    uygulamalarda BigDecimal sınıfı kullanılmak durumundadır. Bu konu uygulama kursunda ele alınacaktır.
- char türü Java'da UNICODE tablo dikkate alınarak belirlenmiştir. Bu nedenle char türü 2 byte'dır. Yani
    char türden bir değişkenin içerisine herhangi bir karakterin UNICODE tablosundaki sıra numarası
    yerleştirilebilir. UNICODE tablo dünyadaki neredeyse bütün dillerin karakterlerini ve pek çok özel
    karakteri ifade edebilme yeteneğine sahiptir. (www.unicode.org)
- Yazılar aslında her bir karakteri bir sayı olacak biçimde bellekte kodlanmaktadır. Hangi sayının hangi
    karakteri temsil ettiği bir tabloyla belirlenmektedir. ASCII tablosu 1 byte'lık yani 256 satırdan
    oluşan bir tabloyken UNICODE 2 byte'lık yani 65 536 satırdan oluşan bir tablodur.
Not: ASCII tablosunun ilk hali 7 bittir. Daha sonra 8 bitlik ASCII tablosu oluşturulmuştur.
- Yalnızca ASCII ve UNICODE değil pek çok karakter tabloları ve kodlamaları vardır. Buna "character
    encoding" denilmektedir. Bir yazı hangi tabloyla kodlanmışsa o tabloyla yorumlamak gerekir. Aksi halde
    asıl yazıyla alakası olmayan bir yazı görüntülenebilir. Karakter kodlama (character encoding) konusu
    ileride ele alınacaktır.
- Java standarlarında boolean türünün uzunluğu belirtilmemiştir.
- Java'da en çok kullanılan tamsayı türü int, en çok kullanılan gerçek sayı türü de double'dır.
Not: Büyük ölçüde Java programlama dilinin özellikleri alınarak geliştirilmiş C# programlama dilinde
       tamsayı türlerinin ayrıca işaretsiz versiyonları da bulunmaktadır.
Not: C# programlama dilinde decimal isimli bir tür bulunmaktadır Bu tür doğal bir tür değildir.
       Microişlemcilerin decimal türü ile işlemler yapabilecek komutları yoktur. Bu işlemler dolaylı
       olarak yüzlerce komut ile yapılabilmektedir. Java'daki BigDecimal sınıfının karşılığı olarak C#'da
       decimal türü kullanılmaktadır.

Bildirim İşlemi
  Kullanılmadan önce bir değişkenin derleyiciye tanıtılması işlemine bildirim (declaration) denir.
    Değişkenler bildirilmeden kullanılamazlar.
    
  Bildirim işlminin genel biçimi şöyledir:
    <tür> <değişken listesi>;
  Aynı türden değişkenler aralarına "," (virgül) konularak bildirilebilirler.
  
  Java programlama dilinde değişken bildirimleri 3 yerde yapılabilir:
    1- Metotların içerisinde: Metotların içerisinde bildirilen değişkenlere yerel değişkenler (local
         variables) denilmektedir.
    2- Metotların parametre parantezleri içerisinde: Bu tür değişkenlere parametre değişkenleri
         denilmektedir.
    3- Metotların dışında fakat sınıfların içerisinde: Bu tür değişkenlere "sınıfların veri elemanları"
         denilmektedir.
         
Yerel bildirimler
  Yerel değişkenler metodun içerisinde herhangi bir yerde bildirilebilirler.
  Not: Bir değişkenin içerisindeki değerler print ve ğrintln metotlarıyla yazdırılabilirler.
  
Değişkenlere İlkdeğer Verilmesi
  Bildirim işleminin bir parçası olarak değişkenlere değer atanmasına ilk değer verme (initialization)
    denilmektedir.
  İlk değer verme ve ilk kez değer verme işlemleri çoğu zaman işlevleri aynı olsa da teknik olarak aynı
    değildir.
  Örnek:
    int a = 8; //İlkdeğer verme işlemi
    int b;
    b = 11; //İlk kez değer verme işlemi

Değişkenlerin Faaliyet Alanları
  Bildirilen bir değişkenin derleyici tarafından tanınabildiği, görülebildiği program aralığına faaliyet
    alanı (scope) denir. Bir değişken yalnızca faaliyet alanı içerisinde kullanılabilir; yani değişkenin
    ismi yalnızca o faaliyet alanında geçerlidir.

Yerel Değişkenlerin Faaliyet Alanları
  { ve } arasında kalan bölgelere blok denilmektedir. Bir metodun ana bloğu olmak zorundadır. O ana bloğun
    içerisinde istenildiği kadar iç içe ya da ayrık bloklar oluşturulabilir. Bir yerel değişken
    bildirildiği noktadan sonra ve bildirildiği bloğun sonuna kadarki bölgede faaliyet gösterir.
  Java'da bir yerel değişkenin bildirildiği noktadan itibaren aynı faaliyet alanı içerisinde aynı isimde
    başka bir yerel değişken bildirilemez. Ancak ayrık bloklarda aynı isimde değişken bildirimi yapılabilir.
  Metot gövdeleri de aslında birer blok olduğundan, farklı metotlarda da aynı isimde değişkenler
    bildirilebilir.
  Java programlama dilinde değer atanmamış yerel değişkenlerin değerleri program içerisinde kullanılamaz.
  
Değişken İsimlendirme Kuralları
  - Değişken isimleri sayısal karakterle başlatılamaz. Ancak alfabetik, _(alttire) ya da $ karakterleri
      ile başlatılabilir. Bundan sonra nümerik karakterler olabilir.
  - Değişkeen isimlendirmede UNICODE karakterler kullanılabilir. Yani isimler Türkçe karakterler
      içerebilir.
  - Java büyük harf küçük harf duyarlılığı olan (case sensetive) bir programlama dilidir. Yani büyük harfler
      ve küçük harfler tamamen farklı karakterler olarak ele alınmaktadır.
  - Değişken isimleriin anlamlı, telaffuz edilebilir çok uzun olmayacak biçimde seçilmesi tavsiye
      edilmektedir. Bu bir sentaks kuralı değildir, ancak programın okunabilirliği ve anlaşılabilirliği
      açısından önemlidir.
  - Değişken isimlendirmede boşluk karakterleri de kullanılmaz.
  - Değişken isimlerinde $ karakteri sentaks olarak kullanılabilmesine karşın tavsiye edilmez. Bazı
      program kodunu kendisi yazan araçlar nadir de olsa $ karakterini kullanabilmektedir.
  - Değişken isimleri doğrudan anahtar sözcüklerden oluşamaz. Java'nın versiyonlarında bu kurala ilişkin
      bazı istisnalar bulunabilmektedir.
  - Değişken isimlerinin maksimum uzunluğu hakkında Java standartlarında açıkça bir şey söylenmemiştir.
      Yeterince uzun olabilmektedir.

Klavyeden Değer Okunması
  Java'da klavyeden değer okumak için birden fazla yöntem bulunmaktadır. Ancak burada basit olarak Scanner
    sınıfı kullanılacaktır. Scanner sınıfı Java 5'den sonra standart kütüphaneye eklenmiştir ve java.util
    paketi içerisinde bulunmaktadır.
    
  Klavyeden int türden bir değer okuma işlemi için:
  package csd;
  
  class App{
         public static void main(String [] args)
         {
                java.util.Scanner kb = new java.util.Scanner(System.in);
                int val = Integer.parseInt(kb.nextLine());
         }
  }
  
  Klavyeden long türden bir değer okuma işlemi için:
  package csd;
  
  class App{
         public static void main(String [] args)
         {
                java.util.Scanner kb = new java.util.Scanner(System.in);
                int val = Long.parseLong(kb.nextLine());
         }
  }
  
  Klavyeden Double türden bir değer okuma işlemi için:
  package csd;
  
  class App{
         public static void main(String [] args)
         {
                java.util.Scanner kb = new java.util.Scanner(System.in);
                int val = Double.parseDouble(kb.nextLine());
         }
  }
  
İfade Kavramı
  Değişkenlerin, sabitlerin ve operatörlerin herhangi bir kombinasyonuna ifade (expression) denir.
  Tek başına bir değişken ifade belirtir. Tekbaşına bir sabit de ifade belirtir; ancak tek başına bir
    operatör ifade belirtmez.


                                          !!!Metotlar!!!

Java programlama dilinde alt programlara metot denir. Bazı programlama dillerindeki fonksiyon veya
  prosedür sözcüklerinin karşılığıdır. Bir metot bağımsız olarak çalıştırılabilen bir program parçasıdır.
  Bir programı metotlara bölerek yazmak bazı faydalar sağlar:
    - Programın kaynak kodu kücülür. Böylece çalışabilen programı temsil eden byte kod da küçülür.
    - Kaynak kodun okunabilirliği ve anlaşılabilirliği artar.
    - Belirli kod parçalarının programın farklı yerlerinde yinelenmesi, programda yapılacak olası bir
        değişikliğin maliyetini azaltır. Ortak kod parçaları metotlar olarak yazıldığında yalnızca
        metotlarda yapılan değişiklik yeterlidir.
    - Programa hata arama daha kolay yapılır.
    - Yazılan metotlar başka projelerde de kullanılabilir.
  Not: Nesne yönelimli programlama tekniğinde genel olarak programlar sınıflara bölünür ve sınıflar
         içerisindeki metotlarla yüksek seviyeli olarak geliştirilir.
  Not: Java programlama dilinde bir metot içerisinde metot bildirimi yapılamaz.

Metotların Geri Dönüş Değerleri
  Bir metot çalıştırıldığı zaman onun kodu çalıtırılır. Metot sona erdiğinde ismie geri dönüş değeri
    (return value) denilen bir değer elde edilir. Bu değer ifadelerde kullanılabilir. Metotların geri
    dönüş değerlerinin türü metot bildirim işleminde metot isminin soluna yazılır. Metotların geri dönüş
    değerleri return deyimiyle oluşşturulur.
    Örnek:
    public static int foo()
    {
      //...
      return [bu örnek için int türden bir ifade];
    }
    
  return deyiminin iki işlevi vardır:
    1- Geri dönüş değerini oluşturur.
    2- Metodu sonlandırır. Yani onun aşağısına yazacağımız kodlar çalıştırılmaz.
  
  Not: Metodun geri dönüş değeri varsa kesinlikle return işlemi uygulanmak zorundadır. Ayrıca metodun her
         mümkün akışında return anahtar sözcüğünün görülmesi gerekir.
  Not: Geri dönüş değeri türünün yerine void anahtar sözcüğü yazılırsa bu durum metodun geri dönüş değeri
         olamdığı anlamına gelir. Geri dönüş değeri olmayan metotlar geri dönüş değeri varmış gibi
         kullanılamazlar.
  Not: Void bir metotta return deyimi kullanılabilir. Bu bir zorunluluk değildir. void metotlarda return
         deyimi kullanılırsa return deyiminin yanına ifade yazılamaz. Bu durumda return metodu
         sonlandırmak için kullanılır. void metotlarda return kullaılmamışsa metot ana blok bittiğinde
         biter.
  Not: Bir metodun geri dönü değerinin olması onu kullanmayı zorunlu hale getirmez. Yani geri dönüş
         değerleri programcı tarafından kullanılmayabilir.
  Not: Metotların geri dönüş değerleri önce derleyici tarafından yaratılan bir geçici değişkene aktarılır.
         Oradan alınarak kullanılır. İfade sonunda o geri dönüş değeri yok edilir.
         Örnek:
           a = foo() * 8;
           ifadesinde aslında şunlar olmaktadır:
             temp = return ifadesi;
             a = temp * 8;
             temp yok ediliyor.
       Yani aslında return işlemi geçici değişkene yapılan bir atama işlemidir. Metotların geri dönüş
         değerlerinin türü aslında yaratılacak olan geçici değişkenin türünü belirler.

Metotların Parametre Değişkenleri
  Metotların parametre değişkenleri metotların girdileri olarak düşünülebilir. Metotların parametre
    değişkenleri metot bildiriminde parametre parantezinin içerisinde belirtilir. Parametre değişkenleri
    metot bildirimi sırasında tür ve değişken ismi virgül atomu ile ayrılacak şekilde yaıpılır.
    Örnek:
      public static void foo(int a, int b, double c)
      {
        //...
      }
    Not: Parametre değişkenleri aynı türden olsa bile tür belirten sözcük her bir parametre için yazılmak
           durumundadır.
    Not: Java programlama dilinde (hatta bir çok programlama dilinde) metot bildiriminde kullanılan
           değişkenlere parametre, metodun çağrılması sırasında parantez içerisinde verilen ifadelere de
           argüman denilmektedir.
    Not: Paramettreli bir metot parametre sayısı kadar argümanla çağırılmak zorundadır. Argümanlar
           herhangi bir ifade olabilir.
           Örnek:
           foo(10 + 8, 11 * 7, 10.32 - 6.23);
    Not: Bir metoda argüman olarak başka bir metodun geri dönüş değeri verilebilir. Bu durumda önce
           argüman olarak verile metot çağırılır, daha sonra metodun geri dönü değeri argüman olarak
           aktarılır. Parametreli bir metot çağırıldığında önce argümanların değerleri hesaplanır. Sonra
           argümanlardan parametre değişkenlerine otomatik atama yapılır. Yani metot çağırılması sırasında
           verilen argümanlar da parametrelere yapılan atama işlemidir. Sonra da akış metoda geçer.
    Not: Java programlama dilinde aşağıdaki durumlar aslında atama işlemleridir:
           - Atama operatörü ile yapılan atamalar.
           - Bir metodun geri dönüş değeri: Geçici değişkene yapılan atama
           - Parametreli bir metodun çağırılması: Argümanlardan parametrelere yapılan atama
    Not: Metotların parametre değişlenleri yalnızca o metot içerisinde kullanılabilir. Metotların parametre
           değişkenleri adeta metodun ana bloğınun başına bildirilmiş yerel değişkenler gibidir.
           Dolayısıyla metot içerisinde bir parametre değişkeni ile aynı isimli başka bir yerel değişken
           bildirilemez.

Matematiksel Metotlar
  Java programlama dilinde java.lang paketi içerisinde bulunan Math sınıfında faydalı işlemler yapan
    matematiksel metotlar bulunmaktadır. Bu metotların yazılması için belirli bir düzelde matematiksel
    bilgi gerekir. Programcı bu detayları bilmek zorunda olmadan metotları çağırabilir. Çok kullanılan
    bazı metodlar şunlardır:
      - Math sınıfının sqrt metodu parametre olarak aldığı sayının karakökünü geri döner.
      - Math sınıfının abs metodları parametre olarak aldığı sayının mutlak değerini geri döner.
      - Math sınıfının sin, cos, tan, asin, acos, atan gibi metotları trigonometrik işlemleri yapar. Bu
          metotlardaki parametre ya da geri dönüş değerleri radyan cinsindedir.
      - Math sınıfında radyan değerini dereceye çeviren ve derece değerini radyana çeviren sırasıyla
          toDegrees ve toRadians metotları vardır.
      - Math sınıfının pow metodu kuvvet alma işlemi yapar.
      - Math sınıfıın exp metodu parametre olarak aldığı değeri kuvvet kabul ederek e sayısının o kuvvetini
          geri döner.
      - Math sınıfının log, log10 ve loglp metotları sırasıyla e tabanına göre logaritma [ln(val)], 10
          tabanına göre logaritma ve parametre olarak aldığı değerin 1 fazlasının e tabanına göre logaritma
          değerini [ln(val + 1)] geri dönerler. Herhangi bir tabana göre logaritma işlemi için programcı bu
          metotları kullanabilir.
      - Math sınıfının signum metodu parametre olarak aldığı değeri işaretini belirleyen metottur. Sayı
          negatifse -1, pozitifse 1 ve sıfırsa 0 değerini geri döner.


                                           !!!Sabitler!!!

Program içerisine doğrudan yazılan sayılara sabit denir. Yalnızca değişkenlerin değil sabitlerin de
  türleri vardır. Bir sabitin türü niceliğine ve sonuna getirilen eklere bağlıdır. Sabitlere ilişkin
  kurallar şöyledir:
    1- Sayı nokta içermiyorsa ve sonuna herhangi bir ek almamışsa ve int türünün sınırları içerisinde
         kalıyorsa sabit int türdendir. Sayı int türünün sınırları dışında kalırsa error oluşur.
    2- Sayı nokta içermiyorsa ve sayının sonunda küçük veya büyük harf L varsa (L veya l), sabit long
         türdendir. Sayı long türünün sınırları dışında kalırsa error oluşur.
    3- Java programlama dilinde byte ve short türlerinden sabit yoktur. Ancak int türden bir sabit byte
         veya short tünlerinin sınırları içerisinde kalıyorsa sırasıyla byte veya short türüne doğrudan
         atanabilir.
    4- Sayı nokta içeriyorsa ve sonunda ek yoksa sabit double türdendir.
    5- Sayı nokta içersin ya da içermesin sonunda küçük veya büyül harf f varsa (F veya f) sabit float
         türdendir.
    6- Sayı nokta içersin ya da içermesin sonunda küçük harf ya da büyük harf d varsa (D veya d) sabit
         double türdendir.
    7- Tek tırnak içerisindeki karakterler char türden sabit belirtir. Tek tırnak içerisine yalnızca tek
         bir karakter yerleştirilebilir.
         Not: Tek tırnak içerisindeki karakterler aslında o karakterin UNICODE tablosundaki sıra numarasını
                belirten sayılardır.
         Not: Java programlama dilinde int türden bir sabit char türünün sınırları içerisinde kalıyorsa
                char türden bir değişkene doğrudan atanabilir. Atanan bu sayı UNICODE tablosundaki sıra
                numarası olarak ele alınır.

Bazı karakterlerin görüntü karşılığı yoktur. Bunlar ekrana yazdırılmak istenirse bir olay gerçekleşir. Bu
  tür karakterlere bastırılamayan (nonprintable-nongraphic) karakterler denilmektedir. Bastırılamayan
  karakterlerin bazıları özel bir yöntemle belirtilmektedir. Bu karakterlere escape sequence denmektedir.
  Tek tırnak içerisinde önce bir ters bölü sonra özel bazı karakterler bazı UNICODE karakterleri temsil
  eder.
  Java programlama dilide bu karakterlerin listesi şöyledir:
    '\b' -> backspace
    '\t' -> horizontal tab
    '\n' -> line feed
    '\f' -> form feed
    '\r' -> carriage return
    '\0' -> null character
  Not: Ters bölü karakterinin kendisi '\\' biçiminde belirtilir. Tek tırnak karakterinin kendisi çift
         tırnak içerisinde doğrudan kullanılabilir. Ancak karakter sabiti olarak '\'' biçiminde yazılmak
         durumundadır.
  Not: Çift tırnak karakterinin kendisi cift tırnak içerisinde doğrudan kullanılamaz. Çift tırnak karakteri
         tırnak içerisinde \" biçiminde yazılmak durumundadır. Çift tırnak karakteri tek tırnak içerisinde
         doğrudan kullanılabilir. Çift tırnak karakter sabiti ayrıca '\"' biçiminde de yazılabilir.
         
    8- boolean türden iki sabit vardır. Bunlar true ve false sabitleridir.

Tam Sayıların Bazı Sayı Sistemlerde Yazılışı
  Tam sayı sabitleri çeşitli sayı tabanlarında(sistemlerinde) yazılabilmektedir:
    - Onluk Sistem (Decimal): Doğrudan rakamlar (0, 1, ..., 9) kullanarak yazılan sabitler.
    - Onaltılık Sistem (Hexadecimal): Sabit onaltılık yazılacaksa önce sabitin önüne 0x veya 0X yazılmak
                                        durumundadır. Daha sonra 0 ve 9 arasındaki rakamlar ve A, B, C, D,
                                        F karakterleri kullanılabilir. Bu karakterler küçük harf olarak
                                        da yazılabilir.
    - Sekizlik Sistem (Octal): Sabit sekizlik tabanda yazılacaksa önce sabitin önüne 0 yazılır daha sonra
                                 0 ve 7 (7 dahil) arasındaki rakamlar kullanıılabilir.
    - İkili Sistem (Binary): Bu şekilde yazılış Java 7'den itibaren Java programlama diline eklenmiştir.
                               Sabit ikilil sistemde yazılacaksa önce sabitin önüne 0b veya 0B yazılmak
                               durumundadır. Daha sonra 0 ve 1 rakamları kullanılabilir.

Gerçek Sayı Sabitlerinin Üstel Gösterilişi
  Gerçek sayı sabitleri bilimsel gösteriliş (scientific notation) diye de adlandırılan üstel biçimde de
    yazılabilir. Bu yazım için küçük ya da büyük harf e kullanılır. E veya e den sonra gelen sayı 10
    sayısının kuvvetini göstermektedir. Sabitin değeri E veya e den önce gelen sayı ve E veya e den
    sonra gelen sayı ile 10 un kuvveti alınarak elde edilen sayının çarpımıdır.

Karakter Sabitlerini \u İle Yazılması
  Karakter sabitleri tek tırnak içerisinde \u ile UNICODE tablosundaki sıra numarası kullanılarak
    yazılabilir.

Sabitler Yazılırken _(alttire) Karakterinin Kullanımı
  Java 7'den itibaren herhangi bir türden sabit içerisinde ve herhangi bir yazılışında _(alttire)
    karakteri kullanılabilmektedir. Bu kullanım okunabilirliği arttırmak için dle eklenmiştir.
  Aşağıda geçersiz durumlar belirtilmiştir, bu durumlar dışında sabitin herhangi bir yeride istenildiği
    kadar kullanılabilir:
      - Karakter sabitlerinde
      - Sayının başında veya sonunda
      - Sayı nokta içeriyorsa noktadan önce veya sonra
      - Sayının sonuna eklenen tür belirten eklerden önce veya sonra
      - Tam sayı sabitlerinin onluk sistem dışında yazılışlarında sayının sistemini belirten öneklerden
          sonra veya önekler arasında veya öneklerin başında.
      - Gerçek sayı sabitlerinin üstel yazılışşında E veya e den önce veya sonra
      - Yazılan sabitin herhangi basamağı yazısal olarak elde edilecekse (Bu konu ileride ele alınacaktır)


                                        !!!Temel Operatörler!!!

Bir işleme yol açan ve işlem sonucunda bir değer üretilmesini sağlayan atomlara operatör denir. Operatörler
  3 biçimde sınıflandırılabilir:
    1- İşlevlerine göre sınıflandırma
    2- Operand sayılarına göre sınıflandırma
    3- Operatörün konumuna göre sınıflandırma
    
1- İşlevlerine göre sınıflandırma: Bu sunuflandırmada operatörün ne amaçla kullanıldığına bakılır. Buna
                                     göre işlevlerine göre operatörleri aşağıdaki gibi gruplandırabiliriz:
                                       - Aritmetik operatörler (arithmetic operators)
                                       - Karşılaştırma operatörleri (comparison operators)
                                       - Mantıksal operatörler (logical operators)
                                       - Bitsel operatörler (bitwise operators)
                                       - Özel amaçlı operatörler (special purpose operators)
       
2- Operand sayılarına göre sınıflandırma: Operatörle işleme sokulan ifadelere operand denir. Operand
                                            sayılarına göre operatörleri aağıdaki gibi sınıflandırabiliriz:
                                              - Tek operandlı operatörler (unary operators)
                                              - İki operandlı operatörler (binary operators)
                                              - Üç operandlı operatörler (ternary operators)

3- Operatörün konumuna göre sınıflandırma: Bu sınıflandırmada operatörün operandlarının neresinde olduğuna
                                             bakılır. Üç şekilde gruplandırılabilir:
                                               - Önek operatörler (prefix operators)
                                               - Araek operatörler (infix operators)
                                               - Sonek operatörler (postfix operators)

Operatörlerin teknik olarak tanımlanabilmesi için bu üç sınıflandırmada nereye düştüğü belirtilmek
  durumundadır. Bundan sonra operatöre ilişkin ilave bazı özellikler belirtilmek durumundadır. Örneğin
  "! operatörü tek operandlı önek durumunda mantıksal bir operatördür. Ayrıca bu operatörün operandı
  boolean türden bir ifade olmak durumundadır ve ürettiği değer de boolean türdendir" gibi...

Farklı işlevleri olan operatörlere ilikin atomlar ayı olabilmektedir. Örneğin + karakteri hem toplama
  operatörü hem de işaret operatörü olarak kullanılmaktadır.
  
Operatörler Arasındaki Öncelik İlişkisi
  Her operatörün diğerine göre bir öncelik durumu (precedence) vardır. Operatörlerin bazıları eşit
    öncelikte olabilirler. İşlemler genel olarak öncelik sırasına göre yapılır.
    Örneğin:
      "i" yapılan işlemi temsil etmek üzere;
        a = b + c * d;
      işleminin yapılışı
        i1: c * d
        i2: b + i1
        i3: a = i2
      şeklindedir.
      
    "()" parantezler kullanılarak önceliklendirme sağlanabilir.
    Örneğin:
        a = (b + c) * d;
      işlemi
        i1: b + c
        i2: i1 * d
        i3: a = i2
      şeklinde yapılır.

  Operatörler arasındaki öncelik ilişkisi operatör öncelik tablosu denilen bir tabloyla betimlernir.
  Örneğin:
    Operatör  İlişkisi
    ()        Soldan sağa
    * /       Soldan sağa
    + -       Soldan sağa
    =         Sağdan sola
    
    Öncelik tablosunda yukarıdaki satırlar aşağıdaki satırlara göre yüksek önceliklidir. Aynı satırdakiler
      eşit önceliklidir. Eşit öncelikli operatörler ifade içerisindeki konumlarına göre solda sağa (left
      associative) ya da sağdan sola (right associative) öncelikli olarak yapılırlar.
      
*, /, + ve - Operatörleri
  Bu operatörler iki operandı araek durumunda aritmetik operatörlerdir. Matematikteki klasik 4 işlemi
    yaparlar.

% Operatörü
  Bu operatöre "mod operatörü" de denmektedir. Operatör sol taraftaki operandın sağ taraftaki operanda
    bölümünden elde edilen kalan değerini üretir.

İşaret + ve İşaret - Operatörleri
  İşaret + ve işaret - operatörleri tek operandlı önek durumunda aritmetik operatörlerdir. İşaret -
    operatörü operandının negatif değerini üretir.
    
++ ve -- Operatörleri
  ++ operatörüne artırma (increment), -- operatörüne eksiltme (decrement) operatörü denir. Bu operatörler
    tek operandlı önek ve sonek olarak kullanılabilen aritmetik operatörlerdir. ++ operatörü operandın
    değerini 1 artırır, -- operatörü operandın değerini 1 eksiltir.
  Bu operatörlerin önek ve sonek kullanımları farklıdır. Bu operatörlerin hem önek hem de sonek
    kullanımları aynı öncelikte yapılır. Ancak önek kullanımda sonraki işleme değişkenin artırılmış ya da
    eksiltilmiş değeri sokulurken, sonek kullanımda değişkenin artırılmamış ya da eksiltilmemiş değeri
    sokulur.
  ++ ve -- operatörlerinin operandları değişken olmak durumundadır.
    Örneğin:
        b = 8++; //error
      ifadesinde ++ operatörünün operandı sabit olduğundan ifade geçersizdir.
  Not: C/C++ dillerinde ++ ve -- operatörleri ile bu operatörlerin operandlarının aynı ifadede bulunması
         tanımsız davranışa (undefined behaviour) yol açmaktadır. Java'da herhanggi bir sorun
         bulunmamaktadır. Derleyicinin tanımsız davranışı C/C++ standartlarina göre kısaca ne olacağı
         belli olmayan durumlar için kullanılmaktadır. Yani bu dillerde "programcı tanımsız davranışa yol
         açacak kodlardan kaçınmak durumundadır" anlamına gelmektedir. Java'da tanımsız davranışa yol açacak
         hiçbir durum yoktur. Yani Java'da bir ifade ya geçerli ya da geçersiz (error) olmaktadır.
  "Bilindiği gibi Java'da atomlar arasında istenildiği kadar boşluk bırakılabilir. Atomlar istenildiği
    kadar bitişik yazılabilir. Anahtar sözcükler ve değişkenler bitişik yazılamaz" kuralları geçerlidir.
    Peki aşağıdaki gibi bir ifadeyi derleyici nasıl algılayacaktır?
      a = b+++c;
  Yani derleyici bu ifade için, "a = b + ++c;" biçiminde mi yoksa "a = b++ + c;" biçiminde mi işlem
    yapacaktır? Burada derleyici derleme sırasında anlamlı en uzun ifadeyi seçer. Yani "a = b++ + c;"
    biçiminde işlem yapılacaktır.

Karşılaştırma Operatörleri
  Toplam 6 adet karşılaştırma operatörü vardır. Bu operatörler iki operandlı araek durumunda
    operatörlerdir. Karşılaştırma operatörleri boolean türden değer üretirler.
  == operatörü eşitlik karşılaştırması yapar. Operandlar birbirine eşits true değilse false değerlerini
    üretirler. Benzer şekilde != operatörü operandlarının eşitsizliği durumunda true eşitsizliği durumunda
    false değerlerini üretir. Yani bu iki operatör birbirlerinin mantıksal olarak tersleridir.
  Benzer şekilde < operatörünün mantıksal tersi >= operatörü ve > operatörünün mantıksal tersi de <=
    operatörüdür.

Mantıksal Operatörler
  Java'da 3 adet mantıksal operatör vardır. Bunlar:
    &&  -> mantıksal ve (logical AND)
    ||  -> mantıksal veya (logical OR)
    !   -> mantıksal değil (logical NOT)
    operatörleridir.
  && ve || operatörleri iki operandlı araek durumunda, ! operatörü tek operandlı önek durumunda
    operatörlerdir. Mantıksal operatörlerin operandları boolean türden olmak zorundadır. Ürettikleri
    değerler de boolean türdendir. Ürettikleri değerler şöyledir:
           && ve || Operatörleri
        A      B     A && B    A || B
      True   False    True      True
      True   False   False      True
      False   True   False      True
      False  False   False     False
              ! Operatörü
                A     !A
              True   False
              False   True











